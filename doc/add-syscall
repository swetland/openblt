$Id: //depot/blt/doc/add-syscall#1 $

Copyright 1999 Sidney Cammeresi.  All rights reserved.


How to add a system call to the kernel
--------------------------------------

Suppose we want to add a new system call named `port_fry' that will find
all threads listening on a given port and cause the DRAM cells in which
their code is stored to explode in a given number of microseconds.

1.  Reserve a number for the system call in include/blt/syscall_id.h.  At
    the end of the list add a line like

        #define BLT_SYS_port_fry     666

    This name must begin with BLT_SYS_ because all of the actual system
    call functions are generated by preprocessor macros.

2.  Add a function prototype to include/blt/syscall.h.

        int port_fry (int port, int when);

3.  Add an entry for port_fry in lib/libblt/syscalls.S.  At the bottom
    of the file and add a line like

        SYSCALL(port_fry)

    This will generate code that traps into the kernel when you call the
    C symbol port_fry().

4.  Implement the system call in the kernel.  In the function syscall()
    in kernel/syscall.c, add a clause to the case statement:

        case BLT_SYS_port_fry :
            kprintf ("kernel: will fry on %d in %d usecs", p_uint32 (1),
                p_uint32 (2));
            /* ... */
            break;

    Note that to retrieve the arguments to your system call, you need to
    use the macros p_uint32() and friends.  Argument numbers start at 1.

